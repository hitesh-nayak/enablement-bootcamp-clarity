/**
 * SPDX-FileCopyrightText: (c) 2024 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.liferay.custom.object.service.model.impl;

import com.liferay.custom.object.service.model.StateObject;
import com.liferay.custom.object.service.model.StateObjectModel;
import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the StateObject service. Represents a row in the &quot;customObjService_StateObject&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>StateObjectModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link StateObjectImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see StateObjectImpl
 * @generated
 */
@JSON(strict = true)
public class StateObjectModelImpl
	extends BaseModelImpl<StateObject> implements StateObjectModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a state object model instance should use the <code>StateObject</code> interface instead.
	 */
	public static final String TABLE_NAME = "customObjService_StateObject";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"stateId", Types.BIGINT},
		{"stateObjectDefId", Types.BIGINT}, {"name", Types.VARCHAR},
		{"pinCode", Types.BIGINT}, {"extRefId", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("stateId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("stateObjectDefId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("pinCode", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("extRefId", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table customObjService_StateObject (uuid_ VARCHAR(75) null,stateId LONG not null primary key,stateObjectDefId LONG,name VARCHAR(75) null,pinCode LONG,extRefId VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table customObjService_StateObject";

	public static final String ORDER_BY_JPQL =
		" ORDER BY stateObject.stateId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY customObjService_StateObject.stateId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long STATEID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public StateObjectModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _stateId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setStateId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _stateId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return StateObject.class;
	}

	@Override
	public String getModelClassName() {
		return StateObject.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<StateObject, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<StateObject, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<StateObject, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((StateObject)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<StateObject, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<StateObject, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(StateObject)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<StateObject, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<StateObject, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<StateObject, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<StateObject, Object>>
				attributeGetterFunctions =
					new LinkedHashMap<String, Function<StateObject, Object>>();

			attributeGetterFunctions.put("uuid", StateObject::getUuid);
			attributeGetterFunctions.put("stateId", StateObject::getStateId);
			attributeGetterFunctions.put(
				"stateObjectDefId", StateObject::getStateObjectDefId);
			attributeGetterFunctions.put("name", StateObject::getName);
			attributeGetterFunctions.put("pinCode", StateObject::getPinCode);
			attributeGetterFunctions.put("extRefId", StateObject::getExtRefId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<StateObject, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<StateObject, ?>> attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<StateObject, ?>>();

			attributeSetterBiConsumers.put(
				"uuid", (BiConsumer<StateObject, String>)StateObject::setUuid);
			attributeSetterBiConsumers.put(
				"stateId",
				(BiConsumer<StateObject, Long>)StateObject::setStateId);
			attributeSetterBiConsumers.put(
				"stateObjectDefId",
				(BiConsumer<StateObject, Long>)
					StateObject::setStateObjectDefId);
			attributeSetterBiConsumers.put(
				"name", (BiConsumer<StateObject, String>)StateObject::setName);
			attributeSetterBiConsumers.put(
				"pinCode",
				(BiConsumer<StateObject, Long>)StateObject::setPinCode);
			attributeSetterBiConsumers.put(
				"extRefId",
				(BiConsumer<StateObject, String>)StateObject::setExtRefId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getStateId() {
		return _stateId;
	}

	@Override
	public void setStateId(long stateId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_stateId = stateId;
	}

	@JSON
	@Override
	public long getStateObjectDefId() {
		return _stateObjectDefId;
	}

	@Override
	public void setStateObjectDefId(long stateObjectDefId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_stateObjectDefId = stateObjectDefId;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_name = name;
	}

	@JSON
	@Override
	public long getPinCode() {
		return _pinCode;
	}

	@Override
	public void setPinCode(long pinCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_pinCode = pinCode;
	}

	@JSON
	@Override
	public String getExtRefId() {
		if (_extRefId == null) {
			return "";
		}
		else {
			return _extRefId;
		}
	}

	@Override
	public void setExtRefId(String extRefId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_extRefId = extRefId;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, StateObject.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public StateObject toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, StateObject>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		StateObjectImpl stateObjectImpl = new StateObjectImpl();

		stateObjectImpl.setUuid(getUuid());
		stateObjectImpl.setStateId(getStateId());
		stateObjectImpl.setStateObjectDefId(getStateObjectDefId());
		stateObjectImpl.setName(getName());
		stateObjectImpl.setPinCode(getPinCode());
		stateObjectImpl.setExtRefId(getExtRefId());

		stateObjectImpl.resetOriginalValues();

		return stateObjectImpl;
	}

	@Override
	public StateObject cloneWithOriginalValues() {
		StateObjectImpl stateObjectImpl = new StateObjectImpl();

		stateObjectImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		stateObjectImpl.setStateId(
			this.<Long>getColumnOriginalValue("stateId"));
		stateObjectImpl.setStateObjectDefId(
			this.<Long>getColumnOriginalValue("stateObjectDefId"));
		stateObjectImpl.setName(this.<String>getColumnOriginalValue("name"));
		stateObjectImpl.setPinCode(
			this.<Long>getColumnOriginalValue("pinCode"));
		stateObjectImpl.setExtRefId(
			this.<String>getColumnOriginalValue("extRefId"));

		return stateObjectImpl;
	}

	@Override
	public int compareTo(StateObject stateObject) {
		int value = 0;

		if (getStateId() < stateObject.getStateId()) {
			value = -1;
		}
		else if (getStateId() > stateObject.getStateId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof StateObject)) {
			return false;
		}

		StateObject stateObject = (StateObject)object;

		long primaryKey = stateObject.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<StateObject> toCacheModel() {
		StateObjectCacheModel stateObjectCacheModel =
			new StateObjectCacheModel();

		stateObjectCacheModel.uuid = getUuid();

		String uuid = stateObjectCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			stateObjectCacheModel.uuid = null;
		}

		stateObjectCacheModel.stateId = getStateId();

		stateObjectCacheModel.stateObjectDefId = getStateObjectDefId();

		stateObjectCacheModel.name = getName();

		String name = stateObjectCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			stateObjectCacheModel.name = null;
		}

		stateObjectCacheModel.pinCode = getPinCode();

		stateObjectCacheModel.extRefId = getExtRefId();

		String extRefId = stateObjectCacheModel.extRefId;

		if ((extRefId != null) && (extRefId.length() == 0)) {
			stateObjectCacheModel.extRefId = null;
		}

		return stateObjectCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<StateObject, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<StateObject, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<StateObject, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((StateObject)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, StateObject>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					StateObject.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _stateId;
	private long _stateObjectDefId;
	private String _name;
	private long _pinCode;
	private String _extRefId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<StateObject, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((StateObject)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("stateId", _stateId);
		_columnOriginalValues.put("stateObjectDefId", _stateObjectDefId);
		_columnOriginalValues.put("name", _name);
		_columnOriginalValues.put("pinCode", _pinCode);
		_columnOriginalValues.put("extRefId", _extRefId);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("stateId", 2L);

		columnBitmasks.put("stateObjectDefId", 4L);

		columnBitmasks.put("name", 8L);

		columnBitmasks.put("pinCode", 16L);

		columnBitmasks.put("extRefId", 32L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private StateObject _escapedModel;

}